Generates HTML pages of API documentation from Java source files.

Synopsis
javadoc {packages|source-files} [options] [@argfiles]

packages
Names of packages that you want to document, separated by spaces, for example java.lang java.lang.reflect java.awt. If you want to also document the subpackages, use the -subpackages option to specify the packages.

By default, javadoc looks for the specified packages in the current directory and subdirectories. Use the -sourcepath option to specify the list of directories where to look for packages.

source-files
Names of Java source files that you want to document, separated by spaces, for example Class.java Object.java Button.java. By default, javadoc looks for the specified classes in the current directory. However, you can specify the full path to the class file and use wildcard characters, for example /home/src/java/awt/Graphics*.java. You can also specify the path relative to the current directory.

options
Command-line options, separated by spaces. See Options.

@argfiles
Names of files that contain a list of javadoc command options, package names and source file names in any order.

Description
The javadoc command parses the declarations and documentation comments in a set of Java source files and produces a corresponding set of HTML pages that describe (by default) the public and protected classes, nested classes (but not anonymous inner classes), interfaces, constructors, methods, and fields. You can use the javadoc command to generate the API documentation or the implementation documentation for a set of source files.

You can run the javadoc command on entire packages, individual source files, or both. When documenting entire packages, you can either use the -subpackages option to recursively traverse a directory and its subdirectories, or to pass in an explicit list of package names. When you document individual source files, pass in a list of Java source file names. See Simple Examples.

Conformance
The standard doclet does not validate the content of documentation comments for conformance nor does it attempt to correct any errors in documentation comments. Be aware of the problems that may arise when generating non-conforming output or output containing executable content, such as JavaScript, when running the javadoc command. The standard doclet does provide the -Xdoclint option to help you detect common problems in documentation comments; however, it is also recommended to check the generated output with any appropriate conformance and checking tools.